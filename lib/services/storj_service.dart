// ======================================================================================
// üß© IMPORTAZIONI NECESSARIE
// ======================================================================================
import 'dart:io'; // üóÇÔ∏è Fornisce classi per lavorare con file e directory
import 'dart:typed_data'; // üß† Gestione dati binari (liste di byte)
import 'package:flutter/foundation.dart'; // üì± Funzionalit√† fondamentali Flutter + debug
import 'package:minio/minio.dart'; // ‚òÅÔ∏è Client ufficiale per interagire con servizi S3-compatibili come Storj
import 'package:path/path.dart'
    as p; // üó∫Ô∏è Utility per manipolare percorsi di file
import 'package:path_provider/path_provider.dart'; // üìÇ Ottiene percorsi di sistema per salvare file

// ======================================================================================
// üöÄ CLASSE PRINCIPALE STORJSERVICE (SINGLETON)
// ======================================================================================
class StorjService {
  // üîí IMPLEMENTAZIONE DEL PATTERN SINGLETON
  // ------------------------------------------------------------------------------------
  // Garantisce una sola istanza globale della classe
  static final StorjService _instance = StorjService._internal();

  // Factory constructor per accesso controllato all'istanza
  factory StorjService() => _instance;

  // Costruttore interno privato (impedisce creazioni esterne)
  StorjService._internal();

  // ====================================================================================
  // üîê CONFIGURAZIONE CREDENZIALI PER STORJ
  // ====================================================================================
  static const String endpoint =
      'gateway.storjshare.io'; // üåê Endpoint del gateway Storj
  static const String accessKey =
      'jxd2jggpnkye4wfsb6lalf4b6cia'; // üîë Chiave di accesso
  static const String secretKey =
      'jzh5ytpjdnh5p3divr2qrhc3qsbf4lj32z7wojrwa4uoh75yar6yk'; // üóùÔ∏è Chiave segreta
  static const String bucketName =
      'voice-chat-audios'; // üì¶ Nome del bucket predefinito

  // ====================================================================================
  // üíæ STATO INTERNO DEL SERVIZIO
  // ====================================================================================
  Minio?
  _minio; // üß© Istanza del client Minio (inizializzata solo dopo chiamata a initialize())
  final Map<String, String> _audioCache =
      {}; // üíø Cache locale: objectKey -> percorso file locale
  bool _isInitialized =
      false; // üö© Flag che indica se il servizio √® stato inizializzato

  // üîç Getter pubblico per verificare lo stato di inizializzazione
  bool get isInitialized => _isInitialized;

  // ====================================================================================
  // ‚öôÔ∏è INIZIALIZZAZIONE DEL SERVIZIO
  // ====================================================================================
  Future<void> initialize() async {
    // Se gi√† inizializzato, termina immediatamente
    if (_isInitialized) return;

    try {
      // üèóÔ∏è Creazione dell'istanza del client Minio con le credenziali
      _minio = Minio(
        endPoint: endpoint,
        accessKey: accessKey,
        secretKey: secretKey,
        useSSL: true, // üîê Utilizza connessioni sicure HTTPS
      );

      // üîç TEST DI CONNESSIONE AL SERVIZIO STORJ
      // ----------------------------------------------------------------------------------
      // Operazione leggera per verificare la connettivit√†
      final buckets = await _minio!.listBuckets();

      // üêû LOG DI DEBUG (solo in modalit√† sviluppo)
      if (kDebugMode) {
        debugPrint('''
‚úÖ CONNESSIONE STORJ STABILITA CON SUCCESSO!
   ‚Ä¢ Endpoint: $endpoint
   ‚Ä¢ Buckets disponibili: ${buckets.length}''');
      }

      // Contrassegna il servizio come inizializzato
      _isInitialized = true;
    } catch (e) {
      // ‚ùå GESTIONE ERRORI DURANTE L'INIZIALIZZAZIONE
      if (kDebugMode) {
        debugPrint('''
üö® ERRORE CRITICO DURANTE L'INIZIALIZZAZIONE!
   ‚Ä¢ Tipo errore: ${e.runtimeType}
   ‚Ä¢ Dettagli: $e''');
      }
      // Rilancia l'eccezione per permettere alla chiamata esterna di gestirla
      rethrow;
    }
  }

  // ====================================================================================
  // ‚¨ÜÔ∏è UPLOAD DI FILE SU STORJ
  // ====================================================================================
  Future<String> uploadFile(String filePath) async {
    // Verifica che il servizio sia stato inizializzato
    if (_minio == null) {
      throw Exception(
        'Servizio non inizializzato! Chiamare initialize() prima di usare i metodi',
      );
    }

    try {
      // üóÇÔ∏è Creazione riferimento al file locale
      final file = File(filePath);

      // üìù Estrazione del nome file dal percorso completo
      final fileName = p.basename(file.path);

      // üîç VERIFICA ESISTENZA FILE LOCALE
      if (!await file.exists()) {
        throw Exception('File non trovato al percorso specificato: $filePath');
      }

      // üì¶ LETTURA CONTENUTO DEL FILE
      final fileBytes = await file.readAsBytes();

      // üîÑ Conversione in stream (formato richiesto da Minio)
      final stream = Stream.value(fileBytes);

      // üöÄ OPERAZIONE DI UPLOAD VERA E PROPRIA
      // CORREZIONE: rimosso il parametro 'length' non supportato
      await _minio!.putObject(
        bucketName, // Bucket di destinazione
        fileName, // Nome dell'oggetto su Storj
        stream, // Stream contenente i dati
      );

      // üì£ NOTIFICA DI SUCCESSO (debug)
      if (kDebugMode) {
        debugPrint('''
üì§ UPLOAD COMPLETATO CON SUCCESSO!
   ‚Ä¢ File: $fileName
   ‚Ä¢ Dimensione: ${(fileBytes.length / 1024).toStringAsFixed(2)} KB
   ‚Ä¢ Bucket: $bucketName''');
      }

      // Restituisce il nome del file (che sar√† l'object key su Storj)
      return fileName;
    } catch (e) {
      // ‚ùå GESTIONE ERRORI DURANTE L'UPLOAD
      if (kDebugMode) {
        debugPrint('''
üö® ERRORE DURANTE L'UPLOAD!
   ‚Ä¢ Percorso file: $filePath
   ‚Ä¢ Dettagli errore: $e''');
      }
      rethrow;
    }
  }

  // ====================================================================================
  // ‚¨áÔ∏è DOWNLOAD DI FILE DA STORJ
  // ====================================================================================
  Future<String> downloadFile(String objectKey) async {
    // Verifica inizializzazione servizio
    if (_minio == null) throw Exception('Servizio non inizializzato!');

    // üîÑ CONTROLLO CACHE IN MEMORIA
    // ----------------------------------------------------------------------------------
    // Se l'oggetto √® gi√† in cache, restituisci il percorso locale immediatamente
    if (_audioCache.containsKey(objectKey)) {
      if (kDebugMode) {
        debugPrint('‚ôªÔ∏è File recuperato dalla cache RAM: $objectKey');
      }
      return _audioCache[objectKey]!;
    }

    try {
      // üìÇ OTTIENI LA DIRECTORY DOCUMENTI DELL'APP
      final appDir = await getApplicationDocumentsDirectory();

      // üóÇÔ∏è Costruisci il percorso locale per il file
      final localPath = '${appDir.path}/$objectKey';
      final localFile = File(localPath);

      // üîç VERIFICA SE IL FILE ESISTE GI√Ä LOCALMENTE
      // --------------------------------------------------------------------------------
      // Evita di scaricare nuovamente se gi√† presente
      if (await localFile.exists()) {
        // Aggiorna la cache per accessi futuri
        _audioCache[objectKey] = localPath;
        return localPath;
      }

      // üåê OPERAZIONE DI DOWNLOAD DA STORJ
      // --------------------------------------------------------------------------------
      // Ottieni lo stream dei dati dall'oggetto Storj
      final stream = await _minio!.getObject(bucketName, objectKey);

      // üß© BYTESBUILDER PER ACCUMULARE I DATI SCARICATI
      final bytesBuilder = BytesBuilder();

      // üîÅ Leggi i chunk di dati dallo stream
      await for (var chunk in stream) {
        bytesBuilder.add(chunk); // Aggiungi ogni chunk al builder
      }

      // üíæ SALVATAGGIO SU DISCO
      // --------------------------------------------------------------------------------
      // Converti i dati accumulati in Uint8List e scrivi sul file
      await localFile.writeAsBytes(bytesBuilder.toBytes());

      // üì• AGGIORNAMENTO CACHE
      _audioCache[objectKey] = localPath;

      // üì£ NOTIFICA DI SUCCESSO
      if (kDebugMode) {
        debugPrint('''
üì• DOWNLOAD COMPLETATO CON SUCCESSO!
   ‚Ä¢ Oggetto: $objectKey
   ‚Ä¢ Percorso locale: $localPath''');
      }

      return localPath;
    } catch (e) {
      // ‚ùå GESTIONE ERRORI DURANTE IL DOWNLOAD
      if (kDebugMode) {
        debugPrint('''
üö® ERRORE DURANTE IL DOWNLOAD!
   ‚Ä¢ Object key: $objectKey
   ‚Ä¢ Dettagli errore: $e''');
      }
      rethrow;
    }
  }

  // ====================================================================================
  // üóëÔ∏è CANCELLAZIONE DI FILE DA STORJ
  // ====================================================================================
  Future<void> deleteFile(String objectKey) async {
    // Verifica inizializzazione servizio
    if (_minio == null) throw Exception('Servizio non inizializzato!');

    try {
      // üßπ OPERAZIONE DI CANCELLAZIONE
      await _minio!.removeObject(bucketName, objectKey);

      // üì£ NOTIFICA DI SUCCESSO
      if (kDebugMode) {
        debugPrint('''
üóëÔ∏è FILE CANCELLATO DA STORJ!
   ‚Ä¢ Oggetto: $objectKey
   ‚Ä¢ Bucket: $bucketName''');
      }
    } catch (e) {
      // ‚ö†Ô∏è GESTIONE SPECIALE ERRORI "NON TROVATO"
      // ----------------------------------------------------------------------------------
      // Se l'oggetto √® gi√† stato cancellato o non esiste
      if (e.toString().contains('404') || e.toString().contains('not found')) {
        if (kDebugMode) {
          debugPrint(
            '‚ö†Ô∏è Oggetto non trovato (probabilmente gi√† cancellato): $objectKey',
          );
        }
      } else {
        // ‚ùå GESTIONE DI ALTRI ERRORI
        if (kDebugMode) {
          debugPrint('''
üö® ERRORE DURANTE LA CANCELLAZIONE!
   ‚Ä¢ Oggetto: $objectKey
   ‚Ä¢ Errore: $e''');
        }
        rethrow;
      }
    }
  }

  // ====================================================================================
  // üßπ PULIZIA CACHE LOCALE
  // ====================================================================================
  void clearCache() {
    // Svuota la mappa di cache
    _audioCache.clear();

    // Notifica operazione (solo in debug)
    if (kDebugMode) {
      debugPrint('üßπ Cache locale svuotata con successo');
    }
  }
}
